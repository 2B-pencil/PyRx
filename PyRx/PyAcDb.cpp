#include "stdafx.h"
#include "PyAcDb.h"
#include "PyDbEntity.h"
#include "PyDbObjectId.h"
#include "PyDbDatabase.h"
#include "PyDbHostApplicationServices.h"
#include "PyDbBlockTableRecord.h"
#include "PyDbSymbolTableRecord.h"
#include "PyDbDictionary.h"
#include "PyDbSymbolTable.h"
#include "PyCmColorBase.h"
#include "PyDbLayerTableRecord.h"
#include "PyDbField.h"
#include "PyDbEnts.h"
#include "PyDbCurve.h"

using namespace boost::python;

PyDbObject openDbObject(const PyDbObjectId& id, AcDb::OpenMode mode)
{
    AcDbObject* pObj = nullptr;
    if (acdbOpenAcDbObject(pObj, id.m_id, mode) == eOk)
        return PyDbObject{ pObj, true };
    throw PyNullObject();
}

PyDbObject openDbEntity(const PyDbObjectId& id, AcDb::OpenMode mode)
{
    if (id.m_id.objectClass()->isDerivedFrom(AcDbEntity::desc()))
    {
        AcDbEntity* pObj = nullptr;
        if (acdbOpenAcDbEntity(pObj, id.m_id, mode) == eOk)
            return PyDbObject(pObj, true);
    }
    throw PyNullObject();
}

void makeAcDbExtents2dWrapper()
{
    static auto wrapper = class_<AcDbExtents2d>("DbExtents2d")
        .def(init<>())
        .def(init<const AcDbExtents2d&>())
        .def(init<const AcGePoint2d&, const AcGePoint2d&>())
        .def("minPoint", &AcDbExtents2d::minPoint)
        .def("maxPoint", &AcDbExtents2d::maxPoint)
        .def("set", &AcDbExtents2d::set)
#ifndef BRXAPP
        .def("addPoint", &AcDbExtents2d::addPoint)
        .def("addExt", &AcDbExtents2d::addExt)
        .def("expandBy", &AcDbExtents2d::expandBy)
        .def("transformBy", &AcDbExtents2d::transformBy)
#endif // !BRXAPP
        ;
}
void makeAcDbExtentsWrapper()
{
    static auto wrapper = class_<AcDbExtents>("DbExtents")
        .def(init<>())
        .def(init<const AcDbExtents&>())
        .def(init<const AcGePoint3d&, const AcGePoint3d&>())
        .def("minPoint", &AcDbExtents::minPoint)
        .def("maxPoint", &AcDbExtents::maxPoint)
        .def("set", &AcDbExtents::set)
        .def("addPoint", &AcDbExtents::addPoint)
        .def("addExt", &AcDbExtents::addExt)
        .def("expandBy", &AcDbExtents::expandBy)
        .def("transformBy", &AcDbExtents::transformBy)
        //.def("addBlockExt", &AcDbExtents::addBlockExt) //TODO
        ;
}

int RegApp(const std::string& app)
{
    return acdbRegApp(utf8_to_wstr(app).c_str());
}

BOOST_PYTHON_MODULE(PyDb)
{
#ifndef  PyRxDebug
    docstring_options local_docstring_options(false, true, false);
#endif // ! PyRxDebug


#ifdef PyRxDebug
    def("openDbObject", openDbObject);
    def("openDbEntity", openDbEntity);
#endif

    //create in class order!
    makeAcDbExtents2dWrapper();
    makeAcDbExtentsWrapper();
    makeAcCmColorWrapper();
    makeAcCmEntityColorWrapper();
    makeAcCmTransparencyWrapper();
    makeAcDbObjectIdWrapper();
    makeAcDbObjectWrapper();
    makeAcDbFieldtWrapper();
    makeAcDbEntityWrapper();
    makeAcDbBlockBeginWrapper();
    makeAcDbBlockEndWrapper();
    makeAcDbSequenceEndWrapper();

    makePyDbTextWrapper();//combine ents?
    makePyDbAttributeDefinitionWrapper();
    makePyDbAttributeWrapper();
    makeDbBlockReferenceWrapper();
    makeDbMInsertBlockeWrapper();

    makeAcDbVertexWrapper();
    makePyDb2dVertexWrapper();
    makePyAcDb3dPolylineVertexWrapper();
    makePyAcDbPolygonMeshVertexWrapper();
    makePyAcDbPolygonMeshVertexWrapper();
    makePyAcDbFaceRecordWrapper();
    makePyDbCurveWrapper();
    makePyDbPointWrapper();

    makeAcDbDictionaryWrapper();
    makeAcDbSymbolTableWrapper();
    makeAcDbSymbolTableRecordWrapper();
    makeAcDbBlockTableRecordWrapper();
    makeAcDbLayerTableRecordWrapper();
    makeAcDbDatabaseWrapper();
    makeAcDbHostApplicationServicesWrapper();

    //global
    def("RegApp", &RegApp);


    enum_<AcDb::Poly2dType>("Poly2dType")
        .value("k2dSimplePoly", AcDb::Poly2dType::k2dSimplePoly)
        .value("k2dFitCurvePoly", AcDb::Poly2dType::k2dFitCurvePoly)
        .value("k2dQuadSplinePoly", AcDb::Poly2dType::k2dQuadSplinePoly)
        .value("k2dCubicSplinePoly", AcDb::Poly2dType::k2dCubicSplinePoly)
        ;
    enum_<AcDb::Vertex2dType>("Vertex2dType")//leave the k
        .value("k2dVertex", AcDb::Vertex2dType::k2dVertex)
        .value("k2dSplineCtlVertex", AcDb::Vertex2dType::k2dSplineCtlVertex)
        .value("k2dSplineFitVertex", AcDb::Vertex2dType::k2dSplineFitVertex)
        .value("k2dCurveFitVertex", AcDb::Vertex2dType::k2dCurveFitVertex)
        ;
    enum_<AcDb::TextVertMode>("TextHorzMode")
        .value("kTextBase", AcDb::TextVertMode::kTextBase)
        .value("kTextBottom", AcDb::TextVertMode::kTextBottom)
        .value("kTextVertMid", AcDb::TextVertMode::kTextVertMid)
        .value("kTextTop", AcDb::TextVertMode::kTextTop)
        ;
    enum_<AcDb::TextHorzMode>("TextHorzMode")
        .value("kTextLeft", AcDb::TextHorzMode::kTextLeft)
        .value("kTextCenter", AcDb::TextHorzMode::kTextCenter)
        .value("kTextRight", AcDb::TextHorzMode::kTextRight)
        .value("kTextAlign", AcDb::TextHorzMode::kTextAlign)
        .value("kTextMid", AcDb::TextHorzMode::kTextMid)
        .value("kTextFit", AcDb::TextHorzMode::kTextFit)
        ;
    enum_<AcDbBlockTableRecord::BlockScaling>("BlockScaling")
        .value("kAny", AcDbBlockTableRecord::BlockScaling::kAny)
        .value("kUniform", AcDbBlockTableRecord::BlockScaling::kUniform)
        ;
    enum_<AcDb::XrefStatus>("XrefStatus")
        .value("kXrfNotAnXref", AcDb::XrefStatus::kXrfNotAnXref)
        .value("kXrfResolved", AcDb::XrefStatus::kXrfResolved)
        .value("kXrfUnloaded", AcDb::XrefStatus::kXrfUnloaded)
        .value("kXrfUnreferenced", AcDb::XrefStatus::kXrfUnreferenced)
        .value("kXrfFileNotFound", AcDb::XrefStatus::kXrfFileNotFound)
        .value("kXrfUnresolved", AcDb::XrefStatus::kXrfUnresolved)
        ;
    enum_<AcDb::Planarity>("Planarity")
        .value("kNonPlanar", AcDb::Planarity::kNonPlanar)
        .value("kPlanar", AcDb::Planarity::kPlanar)
        .value("kLinear", AcDb::Planarity::kLinear)
        ;
    enum_<AcDb::CollisionType>("CollisionType")
        .value("kCollisionTypeNone", AcDb::CollisionType::kCollisionTypeNone)
        .value("kCollisionTypeSolid", AcDb::CollisionType::kCollisionTypeSolid)
        ;
    enum_<AcDb::Visibility>("Visibility")
        .value("kVisible", AcDb::Visibility::kVisible)
        .value("kInvisible", AcDb::Visibility::kInvisible)
        ;
    enum_<AcCmEntityColor::Color>("AcCmEntityColor_Color")//TODO:?
        .value("kRed", AcCmEntityColor::Color::kRed)
        .value("kGreen", AcCmEntityColor::Color::kGreen)
        .value("kBlue", AcCmEntityColor::Color::kBlue)
        ;

    enum_<AcDb::DxfCode>("DxfCode")
        .value("kDxfInvalid", AcDb::kDxfInvalid)
        .value("kDxfXDictionary", AcDb::kDxfXDictionary)
        .value("kDxfPReactors", AcDb::kDxfPReactors)
        .value("kDxfOperator", AcDb::kDxfOperator)
        .value("kDxfXDataStart", AcDb::kDxfXDataStart)
        .value("kDxfHeaderId", AcDb::kDxfHeaderId)
        .value("kDxfFirstEntId", AcDb::kDxfFirstEntId)
        .value("kDxfEnd", AcDb::kDxfEnd)
        .value("kDxfStart", AcDb::kDxfStart)
        .value("kDxfText", AcDb::kDxfText)
        .value("kDxfXRefPath", AcDb::kDxfXRefPath)
        .value("kDxfShapeName", AcDb::kDxfShapeName)
        .value("kDxfBlockName", AcDb::kDxfBlockName)
        .value("kDxfAttributeTag", AcDb::kDxfAttributeTag)
        .value("kDxfSymbolTableName", AcDb::kDxfSymbolTableName)
        .value("kDxfMstyleName", AcDb::kDxfMstyleName)
        .value("kDxfSymTableRecName", AcDb::kDxfSymTableRecName)
        .value("kDxfAttributePrompt", AcDb::kDxfAttributePrompt)
        .value("kDxfDimStyleName", AcDb::kDxfDimStyleName)
        .value("kDxfLinetypeProse", AcDb::kDxfLinetypeProse)
        .value("kDxfTextFontFile", AcDb::kDxfTextFontFile)
        .value("kDxfDescription", AcDb::kDxfDescription)
        .value("kDxfDimPostStr", AcDb::kDxfDimPostStr)
        .value("kDxfTextBigFontFile", AcDb::kDxfTextBigFontFile)
        .value("kDxfDimAPostStr", AcDb::kDxfDimAPostStr)
        .value("kDxfCLShapeName", AcDb::kDxfCLShapeName)
        .value("kDxfSymTableRecComments", AcDb::kDxfSymTableRecComments)
        .value("kDxfHandle", AcDb::kDxfHandle)
        .value("kDxfDimBlk", AcDb::kDxfDimBlk)
        .value("kDxfDimBlk1", AcDb::kDxfDimBlk1)
        .value("kDxfLinetypeName", AcDb::kDxfLinetypeName)
        .value("kDxfDimBlk2", AcDb::kDxfDimBlk2)
        .value("kDxfTextStyleName", AcDb::kDxfTextStyleName)
        .value("kDxfLayerName", AcDb::kDxfLayerName)
        .value("kDxfCLShapeText", AcDb::kDxfCLShapeText)
        .value("kDxfXCoord", AcDb::kDxfXCoord)
        .value("kDxfYCoord", AcDb::kDxfYCoord)
        .value("kDxfZCoord", AcDb::kDxfZCoord)
        .value("kDxfElevation", AcDb::kDxfElevation)
        .value("kDxfThickness", AcDb::kDxfThickness)
        .value("kDxfReal", AcDb::kDxfReal)
        .value("kDxfViewportHeight", AcDb::kDxfViewportHeight)
        .value("kDxfTxtSize", AcDb::kDxfTxtSize)
        .value("kDxfTxtStyleXScale", AcDb::kDxfTxtStyleXScale)
        .value("kDxfViewWidth", AcDb::kDxfViewWidth)
        .value("kDxfViewportAspect", AcDb::kDxfViewportAspect)
        .value("kDxfTxtStylePSize", AcDb::kDxfTxtStylePSize)
        .value("kDxfViewLensLength", AcDb::kDxfViewLensLength)
        .value("kDxfViewFrontClip", AcDb::kDxfViewFrontClip)
        .value("kDxfViewBackClip", AcDb::kDxfViewBackClip)
        .value("kDxfShapeXOffset", AcDb::kDxfShapeXOffset)
        .value("kDxfShapeYOffset", AcDb::kDxfShapeYOffset)
        .value("kDxfViewHeight", AcDb::kDxfViewHeight)
        .value("kDxfShapeScale", AcDb::kDxfShapeScale)
        .value("kDxfPixelScale", AcDb::kDxfPixelScale)
        .value("kDxfLinetypeScale", AcDb::kDxfLinetypeScale)
        .value("kDxfDashLength", AcDb::kDxfDashLength)
        .value("kDxfMlineOffset", AcDb::kDxfMlineOffset)
        .value("kDxfLinetypeElement", AcDb::kDxfLinetypeElement)
        .value("kDxfAngle", AcDb::kDxfAngle)
        .value("kDxfViewportSnapAngle", AcDb::kDxfViewportSnapAngle)
        .value("kDxfViewportTwist", AcDb::kDxfViewportTwist)
        .value("kDxfVisibility", AcDb::kDxfVisibility)
        .value("kDxfViewportGridDisplay", AcDb::kDxfViewportGridDisplay)
        .value("kDxfLayerLinetype", AcDb::kDxfLayerLinetype)
        .value("kDxfViewportGridMajor", AcDb::kDxfViewportGridMajor)
        .value("kDxfColor", AcDb::kDxfColor)
        .value("kDxfHasSubentities", AcDb::kDxfHasSubentities)
        .value("kDxfViewportVisibility", AcDb::kDxfViewportVisibility)
        .value("kDxfViewportActive", AcDb::kDxfViewportActive)
        .value("kDxfViewportNumber", AcDb::kDxfViewportNumber)
        .value("kDxfInt16", AcDb::kDxfInt16)
        .value("kDxfViewMode", AcDb::kDxfViewMode)
        .value("kDxfCircleSides", AcDb::kDxfCircleSides)
        .value("kDxfViewportZoom", AcDb::kDxfViewportZoom)
        .value("kDxfViewportIcon", AcDb::kDxfViewportIcon)
        .value("kDxfViewportSnap", AcDb::kDxfViewportSnap)
        .value("kDxfViewportGrid", AcDb::kDxfViewportGrid)
        .value("kDxfViewportSnapStyle", AcDb::kDxfViewportSnapStyle)
        .value("kDxfViewportSnapPair", AcDb::kDxfViewportSnapPair)
        .value("kDxfRegAppFlags", AcDb::kDxfRegAppFlags)
        .value("kDxfTxtStyleFlags", AcDb::kDxfTxtStyleFlags)
        .value("kDxfLinetypeAlign", AcDb::kDxfLinetypeAlign)
        .value("kDxfLinetypePDC", AcDb::kDxfLinetypePDC)
        .value("kDxfInt32", AcDb::kDxfInt32)
#ifndef BRXAPP
        .value("kDxfVertexIdentifier", AcDb::kDxfVertexIdentifier)
#endif // !BRXAPP
        .value("kDxfSubclass", AcDb::kDxfSubclass)
        .value("kDxfEmbeddedObjectStart", AcDb::kDxfEmbeddedObjectStart)
        .value("kDxfControlString", AcDb::kDxfControlString)
        .value("kDxfDimVarHandle", AcDb::kDxfDimVarHandle)
        .value("kDxfUCSOrg", AcDb::kDxfUCSOrg)
        .value("kDxfUCSOriX", AcDb::kDxfUCSOriX)
        .value("kDxfUCSOriY", AcDb::kDxfUCSOriY)
        .value("kDxfXReal", AcDb::kDxfXReal)
        .value("kDxfViewBrightness", AcDb::kDxfViewBrightness)
        .value("kDxfViewContrast", AcDb::kDxfViewContrast)
        .value("kDxfInt64", AcDb::kDxfInt64)
        .value("kDxfXInt16", AcDb::kDxfXInt16)
        .value("kDxfNormalX", AcDb::kDxfNormalX)
        .value("kDxfNormalY", AcDb::kDxfNormalY)
        .value("kDxfNormalZ", AcDb::kDxfNormalZ)
        .value("kDxfXXInt16", AcDb::kDxfXXInt16)
        .value("kDxfInt8", AcDb::kDxfInt8)
        .value("kDxfRenderMode", AcDb::kDxfRenderMode)
        .value("kDxfDefaultLightingType", AcDb::kDxfDefaultLightingType)
        .value("kDxfShadowFlags", AcDb::kDxfShadowFlags)
        .value("kDxfBool", AcDb::kDxfBool)
        .value("kDxfDefaultLightingOn", AcDb::kDxfDefaultLightingOn)
        .value("kDxfXTextString", AcDb::kDxfXTextString)
        .value("kDxfBinaryChunk", AcDb::kDxfBinaryChunk)
        .value("kDxfArbHandle", AcDb::kDxfArbHandle)
        .value("kDxfSoftPointerId", AcDb::kDxfSoftPointerId)
        .value("kDxfViewBackgroundId", AcDb::kDxfViewBackgroundId)
        .value("kDxfShadePlotId", AcDb::kDxfShadePlotId)
        .value("kDxfLiveSectionId", AcDb::kDxfLiveSectionId)
        .value("kDxfLiveSectionName", AcDb::kDxfLiveSectionName)
        .value("kDxfHardPointerId", AcDb::kDxfHardPointerId)
        .value("kDxfObjVisualStyleId", AcDb::kDxfObjVisualStyleId)
        .value("kDxfVpVisualStyleId", AcDb::kDxfVpVisualStyleId)
        .value("kDxfMaterialId", AcDb::kDxfMaterialId)
        .value("kDxfVisualStyleId", AcDb::kDxfVisualStyleId)
        .value("kDxfDragVisualStyleId", AcDb::kDxfDragVisualStyleId)
        .value("kDxfSoftOwnershipId", AcDb::kDxfSoftOwnershipId)
        .value("kDxfHardOwnershipId", AcDb::kDxfHardOwnershipId)
        .value("kDxfSunId", AcDb::kDxfSunId)
        .value("kDxfLineWeight", AcDb::kDxfLineWeight)
        .value("kDxfPlotStyleNameType", AcDb::kDxfPlotStyleNameType)
        .value("kDxfPlotStyleNameId", AcDb::kDxfPlotStyleNameId)
        .value("kDxfXXXInt16", AcDb::kDxfXXXInt16)
        .value("kDxfLayoutName", AcDb::kDxfLayoutName)
        .value("kDxfColorRGB", AcDb::kDxfColorRGB)
        .value("kDxfColorName", AcDb::kDxfColorName)
        .value("kDxfAlpha", AcDb::kDxfAlpha)
        .value("kDxfGradientObjType", AcDb::kDxfGradientObjType)
        .value("kDxfGradientPatType", AcDb::kDxfGradientPatType)
        .value("kDxfGradientTintType", AcDb::kDxfGradientTintType)
        .value("kDxfGradientColCount", AcDb::kDxfGradientColCount)
        .value("kDxfGradientAngle", AcDb::kDxfGradientAngle)
        .value("kDxfGradientShift", AcDb::kDxfGradientShift)
        .value("kDxfGradientTintVal", AcDb::kDxfGradientTintVal)
        .value("kDxfGradientColVal", AcDb::kDxfGradientColVal)
        .value("kDxfGradientName", AcDb::kDxfGradientName)
#ifndef BRXAPP
        .value("kDxfFaceStyleId", AcDb::kDxfFaceStyleId)
        .value("kDxfEdgeStyleId", AcDb::kDxfEdgeStyleId)
#endif
        .value("kDxfComment", AcDb::kDxfComment)
        .value("kDxfXdAsciiString", AcDb::kDxfXdAsciiString)
        .value("kDxfRegAppName", AcDb::kDxfRegAppName)
        .value("kDxfXdControlString", AcDb::kDxfXdControlString)
        .value("kDxfXdLayerName", AcDb::kDxfXdLayerName)
        .value("kDxfXdBinaryChunk", AcDb::kDxfXdBinaryChunk)
        .value("kDxfXdHandle", AcDb::kDxfXdHandle)
        .value("kDxfXdXCoord", AcDb::kDxfXdXCoord)
        .value("kDxfXdYCoord", AcDb::kDxfXdYCoord)
        .value("kDxfXdZCoord", AcDb::kDxfXdZCoord)
        .value("kDxfXdWorldXCoord", AcDb::kDxfXdWorldXCoord)
        .value("kDxfXdWorldYCoord", AcDb::kDxfXdWorldYCoord)
        .value("kDxfXdWorldZCoord", AcDb::kDxfXdWorldZCoord)
        .value("kDxfXdWorldXDisp", AcDb::kDxfXdWorldXDisp)
        .value("kDxfXdWorldYDisp", AcDb::kDxfXdWorldYDisp)
        .value("kDxfXdWorldZDisp", AcDb::kDxfXdWorldZDisp)
        .value("kDxfXdWorldXDir", AcDb::kDxfXdWorldXDir)
        .value("kDxfXdWorldYDir", AcDb::kDxfXdWorldYDir)
        .value("kDxfXdWorldZDir", AcDb::kDxfXdWorldZDir)
        .value("kDxfXdReal", AcDb::kDxfXdReal)
        .value("kDxfXdDist", AcDb::kDxfXdDist)
        .value("kDxfXdScale", AcDb::kDxfXdScale)
        .value("kDxfXdInteger16", AcDb::kDxfXdInteger16)
        .value("kDxfXdInteger32", AcDb::kDxfXdInteger32)
#ifndef BRXAPP
        .value("kDxfXdMax", AcDb::kDxfXdMax)
#endif
        ;
    enum_<AcDb::OpenMode>("OpenMode")
        .value("ForRead", AcDb::OpenMode::kForRead)
        .value("ForWrite", AcDb::OpenMode::kForWrite)
        .value("ForNotify", AcDb::OpenMode::kForNotify)
        .value("kForRead", AcDb::OpenMode::kForRead)
        .value("kForWrite", AcDb::OpenMode::kForWrite)
        .value("kForNotify", AcDb::OpenMode::kForNotify)
        ;
    enum_<AcDb::LineWeight>("LineWeight")
        .value("kLnWt000", AcDb::LineWeight::kLnWt000)
        .value("kLnWt005", AcDb::LineWeight::kLnWt005)
        .value("kLnWt009", AcDb::LineWeight::kLnWt009)
        .value("kLnWt013", AcDb::LineWeight::kLnWt013)
        .value("kLnWt015", AcDb::LineWeight::kLnWt015)
        .value("kLnWt018", AcDb::LineWeight::kLnWt018)
        .value("kLnWt020", AcDb::LineWeight::kLnWt020)
        .value("kLnWt025", AcDb::LineWeight::kLnWt025)
        .value("kLnWt030", AcDb::LineWeight::kLnWt030)
        .value("kLnWt035", AcDb::LineWeight::kLnWt035)
        .value("kLnWt040", AcDb::LineWeight::kLnWt040)
        .value("kLnWt050", AcDb::LineWeight::kLnWt050)
        .value("kLnWt053", AcDb::LineWeight::kLnWt053)
        .value("kLnWt060", AcDb::LineWeight::kLnWt060)
        .value("kLnWt070", AcDb::LineWeight::kLnWt070)
        .value("kLnWt080", AcDb::LineWeight::kLnWt080)
        .value("kLnWt090", AcDb::LineWeight::kLnWt090)
        .value("kLnWt100", AcDb::LineWeight::kLnWt100)
        .value("kLnWt106", AcDb::LineWeight::kLnWt106)
        .value("kLnWt120", AcDb::LineWeight::kLnWt120)
        .value("kLnWt140", AcDb::LineWeight::kLnWt140)
        .value("kLnWt158", AcDb::LineWeight::kLnWt158)
        .value("kLnWt200", AcDb::LineWeight::kLnWt200)
        .value("kLnWt211", AcDb::LineWeight::kLnWt211)
        .value("kLnWtByLayer", AcDb::LineWeight::kLnWtByLayer)
        .value("kLnWtByBlock", AcDb::LineWeight::kLnWtByBlock)
        .value("kLnWtByLwDefault", AcDb::LineWeight::kLnWtByLwDefault)
        ;
    enum_<AcDb::PlotStyleNameType>("PlotStyleNameType")
        .value("kPlotStyleNameByLayer", AcDb::PlotStyleNameType::kPlotStyleNameByLayer)
        .value("kPlotStyleNameByBlock", AcDb::PlotStyleNameType::kPlotStyleNameByBlock)
        .value("kPlotStyleNameIsDictDefault", AcDb::PlotStyleNameType::kPlotStyleNameIsDictDefault)
        .value("kPlotStyleNameById", AcDb::PlotStyleNameType::kPlotStyleNameById)
        ;
    enum_<AcDb::EndCaps>("EndCaps")
        .value("kEndCapNone", AcDb::EndCaps::kEndCapNone)
        .value("kEndCapRound", AcDb::EndCaps::kEndCapRound)
        .value("kEndCapAngle", AcDb::EndCaps::kEndCapAngle)
        .value("kEndCapSquare", AcDb::EndCaps::kEndCapSquare)
        ;
    enum_<AcDb::UnitsValue>("UnitsValue")
        .value("kUnitsUndefined", AcDb::UnitsValue::kUnitsUndefined)
        .value("kUnitsInches", AcDb::UnitsValue::kUnitsInches)
        .value("kUnitsFeet", AcDb::UnitsValue::kUnitsFeet)
        .value("kUnitsMiles", AcDb::UnitsValue::kUnitsMiles)
        .value("kUnitsMillimeters", AcDb::UnitsValue::kUnitsMillimeters)
        .value("kUnitsCentimeters", AcDb::UnitsValue::kUnitsCentimeters)
        .value("kUnitsMeters", AcDb::UnitsValue::kUnitsMeters)
        .value("kUnitsKilometers", AcDb::UnitsValue::kUnitsKilometers)
        .value("kUnitsMicroinches", AcDb::UnitsValue::kUnitsMicroinches)
        .value("kUnitsMils", AcDb::UnitsValue::kUnitsMils)
        .value("kUnitsYards", AcDb::UnitsValue::kUnitsYards)
        .value("kUnitsAngstroms", AcDb::UnitsValue::kUnitsAngstroms)
        .value("kUnitsNanometers", AcDb::UnitsValue::kUnitsNanometers)
        .value("kUnitsMicrons", AcDb::UnitsValue::kUnitsMicrons)
        .value("kUnitsDecimeters", AcDb::UnitsValue::kUnitsDecimeters)
        .value("kUnitsDekameters", AcDb::UnitsValue::kUnitsDekameters)
        .value("kUnitsHectometers", AcDb::UnitsValue::kUnitsHectometers)
        .value("kUnitsGigameters", AcDb::UnitsValue::kUnitsGigameters)
        .value("kUnitsAstronomical", AcDb::UnitsValue::kUnitsAstronomical)
        .value("kUnitsLightYears", AcDb::UnitsValue::kUnitsLightYears)
        .value("kUnitsParsecs", AcDb::UnitsValue::kUnitsParsecs)
        .value("kUnitsUSSurveyFeet", AcDb::UnitsValue::kUnitsUSSurveyFeet)
        .value("kUnitsUSSurveyInch", AcDb::UnitsValue::kUnitsUSSurveyInch)
        .value("kUnitsUSSurveyYard", AcDb::UnitsValue::kUnitsUSSurveyYard)
        .value("kUnitsUSSurveyMile", AcDb::UnitsValue::kUnitsUSSurveyMile)
        .value("kUnitsMax", AcDb::UnitsValue::kUnitsMax)
        ;
    enum_<AcDb::JoinStyle>("JoinStyle")
        .value("kJnStylNone", AcDb::JoinStyle::kJnStylNone)
        .value("kJnStylRound", AcDb::JoinStyle::kJnStylRound)
        .value("kJnStylAngle", AcDb::JoinStyle::kJnStylAngle)
        .value("kJnStylFlat", AcDb::JoinStyle::kJnStylFlat)
        ;
    enum_<AcDb::MeasurementValue>("MeasurementValue")
        .value("kEnglish", AcDb::MeasurementValue::kEnglish)
        .value("kMetric", AcDb::MeasurementValue::kMetric)
        ;
    enum_<AcDb::UpdateOption>("UpdateOption")
        .value("kUpdateOptionNone", AcDb::UpdateOption::kUpdateOptionNone)
        .value("kUpdateOptionSkipFormat", AcDb::UpdateOption::kUpdateOptionSkipFormat)
        .value("kUpdateOptionUpdateRowHeight", AcDb::UpdateOption::kUpdateOptionUpdateRowHeight)
        .value("kUpdateOptionUpdateColumnWidth", AcDb::UpdateOption::kUpdateOptionUpdateColumnWidth)
        .value("kUpdateOptionAllowSourceUpdate", AcDb::UpdateOption::kUpdateOptionAllowSourceUpdate)
        .value("kUpdateOptionForceFullSourceUpdate", AcDb::UpdateOption::kUpdateOptionForceFullSourceUpdate)
        .value("kUpdateOptionOverwriteContentModifiedAfterUpdate", AcDb::UpdateOption::kUpdateOptionOverwriteContentModifiedAfterUpdate)
        .value("kUpdateOptionOverwriteFormatModifiedAfterUpdate", AcDb::UpdateOption::kUpdateOptionOverwriteFormatModifiedAfterUpdate)
        .value("kUpdateOptionForPreview", AcDb::UpdateOption::kUpdateOptionForPreview)
        .value("kUpdateOptionIncludeXrefs", AcDb::UpdateOption::kUpdateOptionIncludeXrefs)
        .value("kSkipFormatAfterFirstUpdate", AcDb::UpdateOption::kSkipFormatAfterFirstUpdate)
        ;
    enum_<AcDb::UpdateDirection>("UpdateDirection")
        .value("kUpdateDirSourceToData", AcDb::UpdateDirection::kUpdateDirSourceToData)
        .value("kUpdateDirDataToSource", AcDb::UpdateDirection::kUpdateDirDataToSource)
        ;
    enum_<AcDb::DuplicateRecordCloning>("DuplicateRecordCloning")
        .value("kDrcNotApplicable", AcDb::DuplicateRecordCloning::kDrcNotApplicable)
        .value("kDrcIgnore", AcDb::DuplicateRecordCloning::kDrcIgnore)
        .value("kDrcReplace", AcDb::DuplicateRecordCloning::kDrcReplace)
        .value("kDrcXrefMangleName", AcDb::DuplicateRecordCloning::kDrcXrefMangleName)
        .value("kDrcMangleName", AcDb::DuplicateRecordCloning::kDrcMangleName)
        .value("kDrcUnmangleName", AcDb::DuplicateRecordCloning::kDrcUnmangleName)
        ;
    enum_<AcDb::OrthographicView>("OrthographicView")
        .value("kNonOrthoView", AcDb::OrthographicView::kNonOrthoView)
        .value("kTopView", AcDb::OrthographicView::kTopView)
        .value("kBottomView", AcDb::OrthographicView::kBottomView)
        .value("kFrontView", AcDb::OrthographicView::kFrontView)
        .value("kBackView", AcDb::OrthographicView::kBackView)
        .value("kLeftView", AcDb::OrthographicView::kLeftView)
        .value("kRightView", AcDb::OrthographicView::kRightView)
        ;
    enum_<Acad::ErrorStatus>("ErrorStatus")
        .value("Ok", Acad::ErrorStatus::eOk)
        .value("kOk", Acad::ErrorStatus::eOk)
        .value("kNotImplementedYet", Acad::ErrorStatus::eNotImplementedYet)
        .value("kNotApplicable", Acad::ErrorStatus::eNotApplicable)
        .value("kInvalidInput", Acad::ErrorStatus::eInvalidInput)
        .value("kAmbiguousInput", Acad::ErrorStatus::eAmbiguousInput)
        .value("kAmbiguousOutput", Acad::ErrorStatus::eAmbiguousOutput)
        .value("kOutOfMemory", Acad::ErrorStatus::eOutOfMemory)
        .value("kBufferTooSmall", Acad::ErrorStatus::eBufferTooSmall)
        .value("kInvalidOpenState ", Acad::ErrorStatus::eInvalidOpenState)
        .value("kEntityInInactiveLayout", Acad::ErrorStatus::eEntityInInactiveLayout)
        .value("kHandleExists", Acad::ErrorStatus::eHandleExists)
        .value("kNullHandle", Acad::ErrorStatus::eNullHandle)
        .value("kBrokenHandle", Acad::ErrorStatus::eBrokenHandle)
        .value("kUnknownHandle", Acad::ErrorStatus::eUnknownHandle)
        .value("kHandleInUse", Acad::ErrorStatus::eHandleInUse)
        .value("kNullObjectPointer", Acad::ErrorStatus::eNullObjectPointer)
        .value("kNullObjectId", Acad::ErrorStatus::eNullObjectId)
        .value("kNullBlockName", Acad::ErrorStatus::eNullBlockName)
        .value("kContainerNotEmpty", Acad::ErrorStatus::eContainerNotEmpty)
        .value("kNullEntityPointer", Acad::ErrorStatus::eNullEntityPointer)
        .value("kIllegalEntityType", Acad::ErrorStatus::eIllegalEntityType)
        .value("kKeyNotFound", Acad::ErrorStatus::eKeyNotFound)
        .value("kDuplicateKey", Acad::ErrorStatus::eDuplicateKey)
        .value("kInvalidIndex", Acad::ErrorStatus::eInvalidIndex)
        .value("kDuplicateIndex", Acad::ErrorStatus::eDuplicateIndex)
        .value("kAlreadyInDb", Acad::ErrorStatus::eAlreadyInDb)
        .value("kOutOfDisk", Acad::ErrorStatus::eOutOfDisk)
        .value("kDeletedEntry", Acad::ErrorStatus::eDeletedEntry)
        .value("kNegativeValueNotAllowed", Acad::ErrorStatus::eNegativeValueNotAllowed)
        .value("kInvalidExtents", Acad::ErrorStatus::eInvalidExtents)
        .value("kInvalidAdsName", Acad::ErrorStatus::eInvalidAdsName)
        .value("kInvalidSymbolTableName", Acad::ErrorStatus::eInvalidSymbolTableName)
        .value("kInvalidKey", Acad::ErrorStatus::eInvalidKey)
        .value("kWrongObjectType", Acad::ErrorStatus::eWrongObjectType)
        .value("kWrongDatabase", Acad::ErrorStatus::eWrongDatabase)
        .value("kObjectToBeDeleted", Acad::ErrorStatus::eObjectToBeDeleted)
        .value("kInvalidDwgVersion", Acad::ErrorStatus::eInvalidDwgVersion)
        .value("kAnonymousEntry", Acad::ErrorStatus::eAnonymousEntry)
        .value("kIllegalReplacement", Acad::ErrorStatus::eIllegalReplacement)
        .value("kEndOfObject", Acad::ErrorStatus::eEndOfObject)
        .value("kEndOfFile", Acad::ErrorStatus::eEndOfFile)
        .value("kIsReading", Acad::ErrorStatus::eIsReading)
        .value("kIsWriting", Acad::ErrorStatus::eIsWriting)
        .value("kNotOpenForRead", Acad::ErrorStatus::eNotOpenForRead)
        .value("kNotOpenForWrite", Acad::ErrorStatus::eNotOpenForWrite)
        .value("kNotThatKindOfClass", Acad::ErrorStatus::eNotThatKindOfClass)
        .value("kInvalidBlockName", Acad::ErrorStatus::eInvalidBlockName)
        .value("kMissingDxfField", Acad::ErrorStatus::eMissingDxfField)
        .value("kDuplicateDxfField", Acad::ErrorStatus::eDuplicateDxfField)
        .value("kInvalidDxfCode", Acad::ErrorStatus::eInvalidDxfCode)
        .value("kInvalidResBuf", Acad::ErrorStatus::eInvalidResBuf)
        .value("kBadDxfSequence", Acad::ErrorStatus::eBadDxfSequence)
        .value("kFilerError", Acad::ErrorStatus::eFilerError)
        .value("kVertexAfterFace", Acad::ErrorStatus::eVertexAfterFace)
        .value("kInvalidFaceVertexIndex", Acad::ErrorStatus::eInvalidFaceVertexIndex)
        .value("kInvalidMeshVertexIndex", Acad::ErrorStatus::eInvalidMeshVertexIndex)
        .value("kOtherObjectsBusy", Acad::ErrorStatus::eOtherObjectsBusy)
        .value("kMustFirstAddBlockToDb", Acad::ErrorStatus::eMustFirstAddBlockToDb)
        .value("kCannotNestBlockDefs", Acad::ErrorStatus::eCannotNestBlockDefs)
        .value("kDwgRecoveredOK", Acad::ErrorStatus::eDwgRecoveredOK)
        .value("kDwgNotRecoverable", Acad::ErrorStatus::eDwgNotRecoverable)
        .value("kDxfPartiallyRead", Acad::ErrorStatus::eDxfPartiallyRead)
        .value("kDxfReadAborted", Acad::ErrorStatus::eDxfReadAborted)
        .value("kDxbPartiallyRead", Acad::ErrorStatus::eDxbPartiallyRead)
        .value("kDwgCRCDoesNotMatch", Acad::ErrorStatus::eDwgCRCDoesNotMatch)
        .value("kDwgSentinelDoesNotMatch", Acad::ErrorStatus::eDwgSentinelDoesNotMatch)
        .value("kDwgObjectImproperlyRead", Acad::ErrorStatus::eDwgObjectImproperlyRead)
        .value("kNoInputFiler", Acad::ErrorStatus::eNoInputFiler)
        .value("kDwgNeedsAFullSave", Acad::ErrorStatus::eDwgNeedsAFullSave)
        .value("kDxbReadAborted", Acad::ErrorStatus::eDxbReadAborted)
        .value("kFileLockedByACAD", Acad::ErrorStatus::eFileLockedByACAD)
        .value("kFileAccessErr", Acad::ErrorStatus::eFileAccessErr)
        .value("kFileSystemErr", Acad::ErrorStatus::eFileSystemErr)
        .value("kFileInternalErr", Acad::ErrorStatus::eFileInternalErr)
        .value("kFileTooManyOpen", Acad::ErrorStatus::eFileTooManyOpen)
        .value("kFileNotFound", Acad::ErrorStatus::eFileNotFound)
        .value("kDwkLockFileFound", Acad::ErrorStatus::eDwkLockFileFound)
        .value("kWasErased", Acad::ErrorStatus::eWasErased)
        .value("kPermanentlyErased", Acad::ErrorStatus::ePermanentlyErased)
        .value("kWasOpenForRead", Acad::ErrorStatus::eWasOpenForRead)
        .value("kWasOpenForWrite", Acad::ErrorStatus::eWasOpenForWrite)
        .value("kWasOpenForUndo", Acad::ErrorStatus::eWasOpenForUndo)
        .value("kWasNotifying", Acad::ErrorStatus::eWasNotifying)
        .value("kWasOpenForNotify", Acad::ErrorStatus::eWasOpenForNotify)
        .value("kOnLockedLayer", Acad::ErrorStatus::eOnLockedLayer)
        .value("kMustOpenThruOwner", Acad::ErrorStatus::eMustOpenThruOwner)
        .value("kSubentitiesStillOpen", Acad::ErrorStatus::eSubentitiesStillOpen)
        .value("kAtMaxReaders", Acad::ErrorStatus::eAtMaxReaders)
        .value("kIsWriteProtected", Acad::ErrorStatus::eIsWriteProtected)
        .value("kIsXRefObject", Acad::ErrorStatus::eIsXRefObject)
        .value("kNotAnEntity", Acad::ErrorStatus::eNotAnEntity)
        .value("kHadMultipleReaders", Acad::ErrorStatus::eHadMultipleReaders)
        .value("kDuplicateRecordName", Acad::ErrorStatus::eDuplicateRecordName)
        .value("kXRefDependent", Acad::ErrorStatus::eXRefDependent)
        .value("kSelfReference", Acad::ErrorStatus::eSelfReference)
        .value("kMissingSymbolTable", Acad::ErrorStatus::eMissingSymbolTable)
        .value("kMissingSymbolTableRec", Acad::ErrorStatus::eMissingSymbolTableRec)
        .value("kWasNotOpenForWrite", Acad::ErrorStatus::eWasNotOpenForWrite)
        .value("kCloseWasNotifying", Acad::ErrorStatus::eCloseWasNotifying)
        .value("kCloseModifyAborted", Acad::ErrorStatus::eCloseModifyAborted)
        .value("kClosePartialFailure", Acad::ErrorStatus::eClosePartialFailure)
        .value("kCloseFailObjectDamaged", Acad::ErrorStatus::eCloseFailObjectDamaged)
        .value("kCannotBeErasedByCaller", Acad::ErrorStatus::eCannotBeErasedByCaller)
        .value("kCannotBeResurrected", Acad::ErrorStatus::eCannotBeResurrected)
        .value("kWasNotErased", Acad::ErrorStatus::eWasNotErased)
        .value("kInsertAfter", Acad::ErrorStatus::eInsertAfter)
        .value("kFixedAllErrors", Acad::ErrorStatus::eFixedAllErrors)
        .value("kLeftErrorsUnfixed", Acad::ErrorStatus::eLeftErrorsUnfixed)
        .value("kUnrecoverableErrors", Acad::ErrorStatus::eUnrecoverableErrors)
        .value("kNoDatabase", Acad::ErrorStatus::eNoDatabase)
        .value("kXdataSizeExceeded", Acad::ErrorStatus::eXdataSizeExceeded)
        .value("kRegappIdNotFound", Acad::ErrorStatus::eRegappIdNotFound)
        .value("kRepeatEntity", Acad::ErrorStatus::eRepeatEntity)
        .value("kRecordNotInTable", Acad::ErrorStatus::eRecordNotInTable)
        .value("kIteratorDone", Acad::ErrorStatus::eIteratorDone)
        .value("kNullIterator", Acad::ErrorStatus::eNullIterator)
        .value("kNotInBlock", Acad::ErrorStatus::eNotInBlock)
        .value("kOwnerNotInDatabase", Acad::ErrorStatus::eOwnerNotInDatabase)
        .value("kOwnerNotOpenForRead", Acad::ErrorStatus::eOwnerNotOpenForRead)
        .value("kOwnerNotOpenForWrite", Acad::ErrorStatus::eOwnerNotOpenForWrite)
        .value("kExplodeBeforeTransform", Acad::ErrorStatus::eExplodeBeforeTransform)
        .value("kCannotScaleNonUniformly", Acad::ErrorStatus::eCannotScaleNonUniformly)
        .value("kNotInDatabase", Acad::ErrorStatus::eNotInDatabase)
        .value("kNotCurrentDatabase", Acad::ErrorStatus::eNotCurrentDatabase)
        .value("kIsAnEntity", Acad::ErrorStatus::eIsAnEntity)
        .value("kCannotChangeActiveViewport", Acad::ErrorStatus::eCannotChangeActiveViewport)
        .value("kNotInPaperspace", Acad::ErrorStatus::eNotInPaperspace)
        .value("kCommandWasInProgress", Acad::ErrorStatus::eCommandWasInProgress)
        .value("kGeneralModelingFailure", Acad::ErrorStatus::eGeneralModelingFailure)
        .value("kOutOfRange", Acad::ErrorStatus::eOutOfRange)
        .value("kNonCoplanarGeometry", Acad::ErrorStatus::eNonCoplanarGeometry)
        .value("kDegenerateGeometry", Acad::ErrorStatus::eDegenerateGeometry)
        .value("kInvalidAxis", Acad::ErrorStatus::eInvalidAxis)
        .value("kPointNotOnEntity", Acad::ErrorStatus::ePointNotOnEntity)
        .value("kSingularPoint", Acad::ErrorStatus::eSingularPoint)
        .value("kInvalidOffset", Acad::ErrorStatus::eInvalidOffset)
        .value("kNonPlanarEntity", Acad::ErrorStatus::eNonPlanarEntity)
        .value("kCannotExplodeEntity", Acad::ErrorStatus::eCannotExplodeEntity)
        .value("kStringTooLong", Acad::ErrorStatus::eStringTooLong)
        .value("kInvalidSymTableFlag", Acad::ErrorStatus::eInvalidSymTableFlag)
        .value("kUndefinedLineType", Acad::ErrorStatus::eUndefinedLineType)
        .value("kInvalidTextStyle", Acad::ErrorStatus::eInvalidTextStyle)
        .value("kTooFewLineTypeElements", Acad::ErrorStatus::eTooFewLineTypeElements)
        .value("kTooManyLineTypeElements", Acad::ErrorStatus::eTooManyLineTypeElements)
        .value("kExcessiveItemCount", Acad::ErrorStatus::eExcessiveItemCount)
        .value("kIgnoredLinetypeRedef", Acad::ErrorStatus::eIgnoredLinetypeRedef)
        .value("kBadUCS", Acad::ErrorStatus::eBadUCS)
        .value("kBadPaperspaceView", Acad::ErrorStatus::eBadPaperspaceView)
        .value("kSomeInputDataLeftUnread", Acad::ErrorStatus::eSomeInputDataLeftUnread)
        .value("kNoInternalSpace", Acad::ErrorStatus::eNoInternalSpace)
        .value("kInvalidDimStyle", Acad::ErrorStatus::eInvalidDimStyle)
        .value("kInvalidLayer", Acad::ErrorStatus::eInvalidLayer)
        .value("kUserBreak", Acad::ErrorStatus::eUserBreak)
        .value("kUserUnloaded", Acad::ErrorStatus::eUserUnloaded)
        .value("kUserUnloaded", Acad::ErrorStatus::eUserUnloaded)
        .value("kDeleteEntity", Acad::ErrorStatus::eDeleteEntity)
        .value("kInvalidFix", Acad::ErrorStatus::eInvalidFix)
        .value("kFSMError", Acad::ErrorStatus::eFSMError)
        .value("kBadLayerName", Acad::ErrorStatus::eBadLayerName)
        .value("kLayerGroupCodeMissing", Acad::ErrorStatus::eLayerGroupCodeMissing)
        .value("kBadColorIndex", Acad::ErrorStatus::eBadColorIndex)
        .value("kBadLinetypeName", Acad::ErrorStatus::eBadLinetypeName)
        .value("kBadLinetypeScale", Acad::ErrorStatus::eBadLinetypeScale)
        .value("kBadVisibilityValue", Acad::ErrorStatus::eBadVisibilityValue)
        .value("kProperClassSeparatorExpected", Acad::ErrorStatus::eProperClassSeparatorExpected)
        .value("kBadLineWeightValue", Acad::ErrorStatus::eBadLineWeightValue)
        .value("kBadColor", Acad::ErrorStatus::eBadColor)
        .value("kBadMaterialName", Acad::ErrorStatus::eBadMaterialName)
        .value("kPagerError", Acad::ErrorStatus::ePagerError)
        .value("kOutOfPagerMemory", Acad::ErrorStatus::eOutOfPagerMemory)
        .value("kPagerWriteError", Acad::ErrorStatus::ePagerWriteError)
        .value("kWasNotForwarding", Acad::ErrorStatus::eWasNotForwarding)
        .value("kInvalidIdMap", Acad::ErrorStatus::eInvalidIdMap)
        .value("kInvalidOwnerObject", Acad::ErrorStatus::eInvalidOwnerObject)
        .value("kOwnerNotSet", Acad::ErrorStatus::eOwnerNotSet)
        .value("kWrongSubentityType", Acad::ErrorStatus::eWrongSubentityType)
        .value("kTooManyVertices", Acad::ErrorStatus::eTooManyVertices)
        .value("kTooFewVertices", Acad::ErrorStatus::eTooFewVertices)
        .value("kNoActiveTransactions", Acad::ErrorStatus::eNoActiveTransactions)
        .value("kNotTopTransaction", Acad::ErrorStatus::eNotTopTransaction)
        .value("kTransactionOpenWhileCommandEnded", Acad::ErrorStatus::eTransactionOpenWhileCommandEnded)
        .value("kInProcessOfCommitting", Acad::ErrorStatus::eInProcessOfCommitting)
        .value("kNotNewlyCreated", Acad::ErrorStatus::eNotNewlyCreated)
        .value("kLongTransReferenceError", Acad::ErrorStatus::eLongTransReferenceError)
        .value("kNoWorkSet", Acad::ErrorStatus::eNoWorkSet)
        .value("kAlreadyInGroup", Acad::ErrorStatus::eAlreadyInGroup)
        .value("kNotInGroup", Acad::ErrorStatus::eNotInGroup)
        .value("kAlreadyInferred", Acad::ErrorStatus::eAlreadyInferred)
        .value("kInvalidREFIID", Acad::ErrorStatus::eInvalidREFIID)
        .value("kInvalidNormal", Acad::ErrorStatus::eInvalidNormal)
        .value("kInvalidStyle", Acad::ErrorStatus::eInvalidStyle)
        .value("kCannotRestoreFromAcisFile", Acad::ErrorStatus::eCannotRestoreFromAcisFile)
        .value("kMakeMeProxy", Acad::ErrorStatus::eMakeMeProxy)
        .value("kNLSFileNotAvailable", Acad::ErrorStatus::eNLSFileNotAvailable)
        .value("kNotAllowedForThisProxy", Acad::ErrorStatus::eNotAllowedForThisProxy)
        .value("kNotClonedPrimaryProxy", Acad::ErrorStatus::eNotClonedPrimaryProxy)
        .value("kNotSupportedInDwgApi", Acad::ErrorStatus::eNotSupportedInDwgApi)
        .value("kPolyWidthLost", Acad::ErrorStatus::ePolyWidthLost)
        .value("kNullExtents", Acad::ErrorStatus::eNullExtents)
        .value("kBadDwgHeader", Acad::ErrorStatus::eBadDwgHeader)
        .value("kLockViolation", Acad::ErrorStatus::eLockViolation)
        .value("kLockConflict", Acad::ErrorStatus::eLockConflict)
        .value("kDatabaseObjectsOpen", Acad::ErrorStatus::eDatabaseObjectsOpen)
        .value("kLockChangeInProgress", Acad::ErrorStatus::eLockChangeInProgress)
        .value("kVetoed", Acad::ErrorStatus::eVetoed)
        .value("kNoDocument", Acad::ErrorStatus::eNoDocument)
        .value("kNotFromThisDocument", Acad::ErrorStatus::eNotFromThisDocument)
        .value("kLISPActive", Acad::ErrorStatus::eLISPActive)
        .value("kTargetDocNotQuiescent", Acad::ErrorStatus::eTargetDocNotQuiescent)
        .value("kDocumentSwitchDisabled", Acad::ErrorStatus::eDocumentSwitchDisabled)
        .value("kInvalidContext", Acad::ErrorStatus::eInvalidContext)
        .value("kCreateFailed", Acad::ErrorStatus::eCreateFailed)
        .value("kCreateInvalidName", Acad::ErrorStatus::eCreateInvalidName)
        .value("kSetFailed", Acad::ErrorStatus::eSetFailed)
        .value("kDelDoesNotExist", Acad::ErrorStatus::eDelDoesNotExist)
        .value("kDelIsModelSpace", Acad::ErrorStatus::eDelIsModelSpace)
        .value("kDelLastLayout", Acad::ErrorStatus::eDelLastLayout)
        .value("kDelUnableToSetCurrent", Acad::ErrorStatus::eDelUnableToSetCurrent)
        .value("kDelUnableToFind", Acad::ErrorStatus::eDelUnableToFind)
        .value("kRenameDoesNotExist", Acad::ErrorStatus::eRenameDoesNotExist)
        .value("kRenameIsModelSpace", Acad::ErrorStatus::eRenameIsModelSpace)
        .value("kRenameInvalidLayoutName", Acad::ErrorStatus::eRenameInvalidLayoutName)
        .value("kRenameLayoutAlreadyExists", Acad::ErrorStatus::eRenameLayoutAlreadyExists)
        .value("kRenameInvalidName", Acad::ErrorStatus::eRenameInvalidName)
        .value("kCopyDoesNotExist", Acad::ErrorStatus::eCopyDoesNotExist)
        .value("kCopyIsModelSpace", Acad::ErrorStatus::eCopyIsModelSpace)
        .value("kCopyFailed", Acad::ErrorStatus::eCopyFailed)
        .value("kCopyInvalidName", Acad::ErrorStatus::eCopyInvalidName)
        .value("kCopyNameExists", Acad::ErrorStatus::eCopyNameExists)
        .value("kProfileDoesNotExist", Acad::ErrorStatus::eProfileDoesNotExist)
        .value("kInvalidFileExtension", Acad::ErrorStatus::eInvalidFileExtension)
        .value("kInvalidProfileName", Acad::ErrorStatus::eInvalidProfileName)
        .value("kFileExists", Acad::ErrorStatus::eFileExists)
        .value("kProfileIsInUse", Acad::ErrorStatus::eProfileIsInUse)
        .value("kCantOpenFile", Acad::ErrorStatus::eCantOpenFile)
        .value("kNoFileName", Acad::ErrorStatus::eNoFileName)
        .value("kRegistryAccessError", Acad::ErrorStatus::eRegistryAccessError)
        .value("kRegistryCreateError", Acad::ErrorStatus::eRegistryCreateError)
        .value("kBadDxfFile", Acad::ErrorStatus::eBadDxfFile)
        .value("kUnknownDxfFileFormat", Acad::ErrorStatus::eUnknownDxfFileFormat)
        .value("kMissingDxfSection", Acad::ErrorStatus::eMissingDxfSection)
        .value("kInvalidDxfSectionName", Acad::ErrorStatus::eInvalidDxfSectionName)
        .value("kNotDxfHeaderGroupCode", Acad::ErrorStatus::eNotDxfHeaderGroupCode)
        .value("kUndefinedDxfGroupCode", Acad::ErrorStatus::eUndefinedDxfGroupCode)
        .value("kNotInitializedYet", Acad::ErrorStatus::eNotInitializedYet)
        .value("kInvalidDxf2dPoint", Acad::ErrorStatus::eInvalidDxf2dPoint)
        .value("kInvalidDxf3dPoint", Acad::ErrorStatus::eInvalidDxf3dPoint)
        .value("kBadlyNestedAppData", Acad::ErrorStatus::eBadlyNestedAppData)
        .value("kIncompleteBlockDefinition", Acad::ErrorStatus::eIncompleteBlockDefinition)
        .value("kIncompleteComplexObject", Acad::ErrorStatus::eIncompleteComplexObject)
        .value("kBlockDefInEntitySection", Acad::ErrorStatus::eBlockDefInEntitySection)
        .value("kNoBlockBegin", Acad::ErrorStatus::eNoBlockBegin)
        .value("kDuplicateLayerName", Acad::ErrorStatus::eDuplicateLayerName)
        .value("kBadPlotStyleName", Acad::ErrorStatus::eBadPlotStyleName)
        .value("kDuplicateBlockName", Acad::ErrorStatus::eDuplicateBlockName)
        .value("kBadPlotStyleType", Acad::ErrorStatus::eBadPlotStyleType)
        .value("kBadPlotStyleNameHandle", Acad::ErrorStatus::eBadPlotStyleNameHandle)
        .value("kUndefineShapeName", Acad::ErrorStatus::eUndefineShapeName)
        .value("kDuplicateBlockDefinition", Acad::ErrorStatus::eDuplicateBlockDefinition)
        .value("kMissingBlockName", Acad::ErrorStatus::eMissingBlockName)
        .value("kBinaryDataSizeExceeded", Acad::ErrorStatus::eBinaryDataSizeExceeded)
        .value("kObjectIsReferenced", Acad::ErrorStatus::eObjectIsReferenced)
        .value("kNoThumbnailBitmap", Acad::ErrorStatus::eNoThumbnailBitmap)
        .value("kGuidNoAddress", Acad::ErrorStatus::eGuidNoAddress)
        .value("kMustBe0to2", Acad::ErrorStatus::eMustBe0to2)
        .value("kMustBe0to3", Acad::ErrorStatus::eMustBe0to3)
        .value("kMustBe0to4", Acad::ErrorStatus::eMustBe0to4)
        .value("kMustBe0to5", Acad::ErrorStatus::eMustBe0to5)
        .value("kMustBe0to8", Acad::ErrorStatus::eMustBe0to8)
        .value("kMustBe1to8", Acad::ErrorStatus::eMustBe1to8)
        .value("kMustBe1to15", Acad::ErrorStatus::eMustBe1to15)
        .value("kMustBePositive", Acad::ErrorStatus::eMustBePositive)
        .value("kMustBeNonNegative", Acad::ErrorStatus::eMustBeNonNegative)
        .value("kMustBeNonZero", Acad::ErrorStatus::eMustBeNonZero)
        .value("kMustBe1to6", Acad::ErrorStatus::eMustBe1to6)
        .value("kNoPlotStyleTranslationTable", Acad::ErrorStatus::eNoPlotStyleTranslationTable)
        .value("kPlotStyleInColorDependentMode", Acad::ErrorStatus::ePlotStyleInColorDependentMode)
        .value("kMaxLayouts", Acad::ErrorStatus::eMaxLayouts)
        .value("kNoClassId", Acad::ErrorStatus::eNoClassId)
        .value("kUndoOperationNotAvailable", Acad::ErrorStatus::eUndoOperationNotAvailable)
        .value("kUndoNoGroupBegin", Acad::ErrorStatus::eUndoNoGroupBegin)
        .value("kHatchTooDense", Acad::ErrorStatus::eHatchTooDense)
        .value("kOpenFileCancelled", Acad::ErrorStatus::eOpenFileCancelled)
        .value("kNotHandled", Acad::ErrorStatus::eNotHandled)
        .value("kMakeMeProxyAndResurrect", Acad::ErrorStatus::eMakeMeProxyAndResurrect)
        .value("kFileSharingViolation", Acad::ErrorStatus::eFileSharingViolation)
        .value("kUnsupportedFileFormat", Acad::ErrorStatus::eUnsupportedFileFormat)
        .value("kObsoleteFileFormat", Acad::ErrorStatus::eObsoleteFileFormat)
        .value("kFileMissingSections", Acad::ErrorStatus::eFileMissingSections)
        .value("kRepeatedDwgRead", Acad::ErrorStatus::eRepeatedDwgRead)
        .value("kSilentOpenFileCancelled", Acad::ErrorStatus::eSilentOpenFileCancelled)
        .value("kWrongCellType", Acad::ErrorStatus::eWrongCellType)
        .value("kCannotChangeColumnType", Acad::ErrorStatus::eCannotChangeColumnType)
        .value("kRowsMustMatchColumns", Acad::ErrorStatus::eRowsMustMatchColumns)
        .value("kNullNodeId", Acad::ErrorStatus::eNullNodeId)
        .value("kNoNodeActive", Acad::ErrorStatus::eNoNodeActive)
        .value("kGraphContainsProxies", Acad::ErrorStatus::eGraphContainsProxies)
        .value("kDwgShareDemandLoad", Acad::ErrorStatus::eDwgShareDemandLoad)
        .value("kDwgShareReadAccess", Acad::ErrorStatus::eDwgShareReadAccess)
        .value("kDwgShareWriteAccess", Acad::ErrorStatus::eDwgShareWriteAccess)
        .value("kLoadFailed", Acad::ErrorStatus::eLoadFailed)
        .value("kDeviceNotFound", Acad::ErrorStatus::eDeviceNotFound)
        .value("kNoCurrentConfig", Acad::ErrorStatus::eNoCurrentConfig)
        .value("kNullPtr", Acad::ErrorStatus::eNullPtr)
        .value("kNoLayout", Acad::ErrorStatus::eNoLayout)
        .value("kIncompatiblePlotSettings", Acad::ErrorStatus::eIncompatiblePlotSettings)
        .value("kNonePlotDevice", Acad::ErrorStatus::eNonePlotDevice)
        .value("kNoMatchingMedia", Acad::ErrorStatus::eNoMatchingMedia)
        .value("kInvalidView", Acad::ErrorStatus::eInvalidView)
        .value("kInvalidWindowArea", Acad::ErrorStatus::eInvalidWindowArea)
        .value("kInvalidPlotArea", Acad::ErrorStatus::eInvalidPlotArea)
        .value("kCustomSizeNotPossible", Acad::ErrorStatus::eCustomSizeNotPossible)
        .value("kPageCancelled", Acad::ErrorStatus::ePageCancelled)
        .value("kPlotCancelled", Acad::ErrorStatus::ePlotCancelled)
        .value("kInvalidEngineState", Acad::ErrorStatus::eInvalidEngineState)
        .value("kPlotAlreadyStarted", Acad::ErrorStatus::ePlotAlreadyStarted)
        .value("kNoErrorHandler", Acad::ErrorStatus::eNoErrorHandler)
        .value("kInvalidPlotInfo", Acad::ErrorStatus::eInvalidPlotInfo)
        .value("kNumberOfCopiesNotSupported", Acad::ErrorStatus::eNumberOfCopiesNotSupported)
        .value("kLayoutNotCurrent", Acad::ErrorStatus::eLayoutNotCurrent)
        .value("kGraphicsNotGenerated", Acad::ErrorStatus::eGraphicsNotGenerated)
        .value("kCannotPlotToFile", Acad::ErrorStatus::eCannotPlotToFile)
        .value("kMustPlotToFile", Acad::ErrorStatus::eMustPlotToFile)
        .value("kNotMultiPageCapable", Acad::ErrorStatus::eNotMultiPageCapable)
        .value("kBackgroundPlotInProgress", Acad::ErrorStatus::eBackgroundPlotInProgress)
        .value("kNotShownInPropertyPalette", Acad::ErrorStatus::eNotShownInPropertyPalette)
        .value("kSubSelectionSetEmpty", Acad::ErrorStatus::eSubSelectionSetEmpty)
        .value("kNoIntersections", Acad::ErrorStatus::eNoIntersections)
        .value("kEmbeddedIntersections", Acad::ErrorStatus::eEmbeddedIntersections)
        .value("kNoOverride", Acad::ErrorStatus::eNoOverride)
        .value("kNoStoredOverrides", Acad::ErrorStatus::eNoStoredOverrides)
        .value("kUnableToRetrieveOverrides", Acad::ErrorStatus::eUnableToRetrieveOverrides)
        .value("kUnableToStoreOverrides", Acad::ErrorStatus::eUnableToStoreOverrides)
        .value("kUnableToRemoveOverrides", Acad::ErrorStatus::eUnableToRemoveOverrides)
        .value("kNoStoredReconcileStatus", Acad::ErrorStatus::eNoStoredReconcileStatus)
        .value("kUnableToStoreReconcileStatus", Acad::ErrorStatus::eUnableToStoreReconcileStatus)
        .value("kInvalidObjectId", Acad::ErrorStatus::eInvalidObjectId)
        .value("kInvalidXrefObjectId", Acad::ErrorStatus::eInvalidXrefObjectId)
        .value("kNoViewAssociation", Acad::ErrorStatus::eNoViewAssociation)
        .value("kNoLabelBlock", Acad::ErrorStatus::eNoLabelBlock)
        .value("kUnableToSetViewAssociation", Acad::ErrorStatus::eUnableToSetViewAssociation)
        .value("kUnableToGetViewAssociation", Acad::ErrorStatus::eUnableToGetViewAssociation)
        .value("kUnableToSetLabelBlock", Acad::ErrorStatus::eUnableToSetLabelBlock)
        .value("kUnableToGetLabelBlock", Acad::ErrorStatus::eUnableToGetLabelBlock)
        .value("kUnableToRemoveAssociation ", Acad::ErrorStatus::eUnableToRemoveAssociation)
        .value("kUnableToSyncModelView", Acad::ErrorStatus::eUnableToSyncModelView)
        .value("kDataLinkAdapterNotFound", Acad::ErrorStatus::eDataLinkAdapterNotFound)
        .value("kDataLinkInvalidAdapterId", Acad::ErrorStatus::eDataLinkInvalidAdapterId)
        .value("kDataLinkNotFound", Acad::ErrorStatus::eDataLinkNotFound)
        .value("kDataLinkBadConnectionString", Acad::ErrorStatus::eDataLinkBadConnectionString)
        .value("kDataLinkNotUpdatedYet", Acad::ErrorStatus::eDataLinkNotUpdatedYet)
        .value("kDataLinkSourceNotFound", Acad::ErrorStatus::eDataLinkSourceNotFound)
        .value("kDataLinkConnectionFailed", Acad::ErrorStatus::eDataLinkConnectionFailed)
        .value("kDataLinkSourceUpdateNotAllowed", Acad::ErrorStatus::eDataLinkSourceUpdateNotAllowed)
        .value("kDataLinkSourceIsWriteProtected", Acad::ErrorStatus::eDataLinkSourceIsWriteProtected)
        .value("kDataLinkExcelNotFound", Acad::ErrorStatus::eDataLinkExcelNotFound)
        .value("kDataLinkOtherError", Acad::ErrorStatus::eDataLinkOtherError)
        .value("kXrefReloaded", Acad::ErrorStatus::eXrefReloaded)
        .value("kXrefReloadImpossibleAtThisTime", Acad::ErrorStatus::eXrefReloadImpossibleAtThisTime)
        .value("kSecInitializationFailure", Acad::ErrorStatus::eSecInitializationFailure)
        .value("kSecErrorReadingFile", Acad::ErrorStatus::eSecErrorReadingFile)
        .value("kSecErrorWritingFile", Acad::ErrorStatus::eSecErrorWritingFile)
        .value("kSecInvalidDigitalID", Acad::ErrorStatus::eSecInvalidDigitalID)
        .value("kSecErrorGeneratingTimestamp", Acad::ErrorStatus::eSecErrorGeneratingTimestamp)
        .value("kSecErrorComputingSignature", Acad::ErrorStatus::eSecErrorComputingSignature)
        .value("kSecErrorWritingSignature", Acad::ErrorStatus::eSecErrorWritingSignature)
        .value("kSecErrorEncryptingData", Acad::ErrorStatus::eSecErrorEncryptingData)
        .value("kSecErrorCipherNotSupported", Acad::ErrorStatus::eSecErrorCipherNotSupported)
        .value("kSecErrorDecryptingData", Acad::ErrorStatus::eSecErrorDecryptingData)
        .value("kNoAcDbHostApplication", Acad::ErrorStatus::eNoAcDbHostApplication)
        .value("kNoUnderlayHost", Acad::ErrorStatus::eNoUnderlayHost)
        .value("kPCUnknown", Acad::ErrorStatus::ePCUnknown)
        .value("kPCLargeData", Acad::ErrorStatus::ePCLargeData)
        .value("kPCUnknownFileType", Acad::ErrorStatus::ePCUnknownFileType)
        .value("kPCFileNotFound", Acad::ErrorStatus::ePCFileNotFound)
        .value("kPCFileNotCreated", Acad::ErrorStatus::ePCFileNotCreated)
        .value("kPCFileNotOpened", Acad::ErrorStatus::ePCFileNotOpened)
        .value("kPCFileNotClosed", Acad::ErrorStatus::ePCFileNotClosed)
        .value("kPCFileNotWritten", Acad::ErrorStatus::ePCFileNotWritten)
        .value("kPCFileWrongFormat", Acad::ErrorStatus::ePCFileWrongFormat)
        .value("kPCFileDataSelectorInvalid", Acad::ErrorStatus::ePCFileDataSelectorInvalid)
        .value("kPCCoordSysReprojectFail", Acad::ErrorStatus::ePCCoordSysReprojectFail)
        .value("kPCDiskSpaceTooSmall", Acad::ErrorStatus::ePCDiskSpaceTooSmall)
        .value("kPCThreadTerminated", Acad::ErrorStatus::ePCThreadTerminated)
        .value("kPCFileNotErased", Acad::ErrorStatus::ePCFileNotErased)
        .value("kPCCoordSysAssignFail", Acad::ErrorStatus::ePCCoordSysAssignFail)
        .value("kPCLastImporterUnfinished", Acad::ErrorStatus::ePCLastImporterUnfinished)
        .value("kPCNoEngineInfo", Acad::ErrorStatus::ePCNoEngineInfo)
        .value("kPCInProgress", Acad::ErrorStatus::ePCInProgress)
        .value("kInetBase", Acad::ErrorStatus::eInetBase)
        .value("kInetOk", Acad::ErrorStatus::eInetOk)
        .value("kInetInCache", Acad::ErrorStatus::eInetInCache)
        .value("kInetFileNotFound", Acad::ErrorStatus::eInetFileNotFound)
        .value("kInetBadPath", Acad::ErrorStatus::eInetBadPath)
        .value("kInetTooManyOpenFiles", Acad::ErrorStatus::eInetTooManyOpenFiles)
        .value("kInetFileAccessDenied", Acad::ErrorStatus::eInetFileAccessDenied)
        .value("kInetInvalidFileHandle", Acad::ErrorStatus::eInetInvalidFileHandle)
        .value("kInetDirectoryFull", Acad::ErrorStatus::eInetDirectoryFull)
        .value("kInetHardwareError", Acad::ErrorStatus::eInetHardwareError)
        .value("kInetSharingViolation", Acad::ErrorStatus::eInetSharingViolation)
        .value("kInetDiskFull", Acad::ErrorStatus::eInetDiskFull)
        .value("kInetFileGenericError", Acad::ErrorStatus::eInetFileGenericError)
        .value("kInetValidURL", Acad::ErrorStatus::eInetValidURL)
        .value("kInetNotAnURL", Acad::ErrorStatus::eInetNotAnURL)
        .value("kInetNoWinInet", Acad::ErrorStatus::eInetNoWinInet)
        .value("kInetOldWinInet", Acad::ErrorStatus::eInetOldWinInet)
        .value("kInetNoAcadInet", Acad::ErrorStatus::eInetNoAcadInet)
        .value("kInetNotImplemented", Acad::ErrorStatus::eInetNotImplemented)
        .value("kInetProtocolNotSupported", Acad::ErrorStatus::eInetProtocolNotSupported)
        .value("kInetCreateInternetSessionFailed", Acad::ErrorStatus::eInetCreateInternetSessionFailed)
        .value("kInetInternetSessionConnectFailed", Acad::ErrorStatus::eInetInternetSessionConnectFailed)
        .value("kInetInternetSessionOpenFailed", Acad::ErrorStatus::eInetInternetSessionOpenFailed)
        .value("kInetInvalidAccessType", Acad::ErrorStatus::eInetInvalidAccessType)
        .value("kInetFileOpenFailed", Acad::ErrorStatus::eInetFileOpenFailed)
        .value("kInetHttpOpenRequestFailed", Acad::ErrorStatus::eInetHttpOpenRequestFailed)
        .value("kInetUserCancelledTransfer", Acad::ErrorStatus::eInetUserCancelledTransfer)
        .value("kInetHttpBadRequest", Acad::ErrorStatus::eInetHttpBadRequest)
        .value("kInetHttpAccessDenied", Acad::ErrorStatus::eInetHttpAccessDenied)
        .value("kInetHttpPaymentRequired", Acad::ErrorStatus::eInetHttpPaymentRequired)
        .value("kInetHttpRequestForbidden", Acad::ErrorStatus::eInetHttpRequestForbidden)
        .value("kInetHttpObjectNotFound", Acad::ErrorStatus::eInetHttpObjectNotFound)
        .value("kInetHttpBadMethod", Acad::ErrorStatus::eInetHttpBadMethod)
        .value("kInetHttpNoAcceptableResponse", Acad::ErrorStatus::eInetHttpNoAcceptableResponse)
        .value("kInetHttpProxyAuthorizationRequired", Acad::ErrorStatus::eInetHttpProxyAuthorizationRequired)
        .value("kInetHttpTimedOut", Acad::ErrorStatus::eInetHttpTimedOut)
        .value("kInetHttpConflict", Acad::ErrorStatus::eInetHttpConflict)
        .value("kInetHttpResourceGone", Acad::ErrorStatus::eInetHttpResourceGone)
        .value("kInetHttpLengthRequired", Acad::ErrorStatus::eInetHttpLengthRequired)
        .value("kInetHttpPreconditionFailure", Acad::ErrorStatus::eInetHttpPreconditionFailure)
        .value("kInetHttpRequestTooLarge", Acad::ErrorStatus::eInetHttpRequestTooLarge)
        .value("kInetHttpUriTooLong", Acad::ErrorStatus::eInetHttpUriTooLong)
        .value("kInetHttpUnsupportedMedia", Acad::ErrorStatus::eInetHttpUnsupportedMedia)
        .value("kInetHttpServerError", Acad::ErrorStatus::eInetHttpServerError)
        .value("kInetHttpNotSupported", Acad::ErrorStatus::eInetHttpNotSupported)
        .value("kInetHttpBadGateway", Acad::ErrorStatus::eInetHttpBadGateway)
        .value("kInetHttpServiceUnavailable", Acad::ErrorStatus::eInetHttpServiceUnavailable)
        .value("kInetHttpGatewayTimeout", Acad::ErrorStatus::eInetHttpGatewayTimeout)
        .value("kInetHttpVersionNotSupported", Acad::ErrorStatus::eInetHttpVersionNotSupported)
        .value("kInetInternetError", Acad::ErrorStatus::eInetInternetError)
        .value("kInetGenericException", Acad::ErrorStatus::eInetGenericException)
        .value("kInetUnknownError", Acad::ErrorStatus::eInetUnknownError)
        .value("kAlreadyActive", Acad::ErrorStatus::eAlreadyActive)
        .value("kAlreadyInactive", Acad::ErrorStatus::eAlreadyInactive)
        .value("kGraphEdgeNotFound", Acad::ErrorStatus::eGraphEdgeNotFound)
        .value("kGraphNodeNotFound", Acad::ErrorStatus::eGraphNodeNotFound)
        .value("kGraphNodeAlreadyExists", Acad::ErrorStatus::eGraphNodeAlreadyExists)
        .value("kGraphEdgeAlreadyExists", Acad::ErrorStatus::eGraphEdgeAlreadyExists)
        .value("kGraphCyclesFound", Acad::ErrorStatus::eGraphCyclesFound)
        .value("kAlreadyHasRepresentation", Acad::ErrorStatus::eAlreadyHasRepresentation)
        .value("kNoRepresentation", Acad::ErrorStatus::eNoRepresentation)
        .value("kFailedToSetEdgeChamfers", Acad::ErrorStatus::eFailedToSetEdgeChamfers)
        .value("kNoConnectedBlendSet", Acad::ErrorStatus::eNoConnectedBlendSet)
        .value("kFailedToBlend", Acad::ErrorStatus::eFailedToBlend)
        .value("kFailedToSetEdgeRounds", Acad::ErrorStatus::eFailedToSetEdgeRounds)
        .value("kFailedToSetVertexRounds", Acad::ErrorStatus::eFailedToSetVertexRounds)
        .value("kVSNotFound", Acad::ErrorStatus::eVSNotFound)
        .value("kVSTrue", Acad::ErrorStatus::eVSTrue)
        .value("kVSFalse", Acad::ErrorStatus::eVSFalse)
        .value("kVSAlreadyExists", Acad::ErrorStatus::eVSAlreadyExists)
        .value("kVSOneOffCreated", Acad::ErrorStatus::eVSOneOffCreated)
        .value("kVSAPIOnlyValues", Acad::ErrorStatus::eVSAPIOnlyValues)
        .value("kVSIsInUse", Acad::ErrorStatus::eVSIsInUse)
        .value("kVSIsAcadDefault", Acad::ErrorStatus::eVSIsAcadDefault)
        .value("kEmptyOperand", Acad::ErrorStatus::eEmptyOperand)
        .value("kNoEntitiesFromPersistentIds", Acad::ErrorStatus::eNoEntitiesFromPersistentIds)
        .value("kFailedCurveCheck", Acad::ErrorStatus::eFailedCurveCheck)
        .value("kMaxNodes", Acad::ErrorStatus::eMaxNodes)
        .value("kFailedToEvaluate", Acad::ErrorStatus::eFailedToEvaluate)
        .value("kFailedToEvaluateDependents", Acad::ErrorStatus::eFailedToEvaluateDependents)
        .value("kInvalidExpression", Acad::ErrorStatus::eInvalidExpression)
        .value("kCyclicDependency", Acad::ErrorStatus::eCyclicDependency)
        .value("kInconsistentConstraint", Acad::ErrorStatus::eInconsistentConstraint)
        .value("kOverDefinedConstraint", Acad::ErrorStatus::eOverDefinedConstraint)
        .value("kAllInSameRigidSet", Acad::ErrorStatus::eAllInSameRigidSet)
        .value("kInvalidParameterName", Acad::ErrorStatus::eInvalidParameterName)
        .value("kReferencedInEquation", Acad::ErrorStatus::eReferencedInEquation)
        .value("kEntityRestricedInDOF", Acad::ErrorStatus::eEntityRestricedInDOF)
        .value("kDataTooLarge", Acad::ErrorStatus::eDataTooLarge)
        .value("kNearSizeLimit", Acad::ErrorStatus::eNearSizeLimit)
        .value("kStringNotAllowedInExpression", Acad::ErrorStatus::eStringNotAllowedInExpression)
        .value("kTooManyActiveCommands", Acad::ErrorStatus::eTooManyActiveCommands)
        .value("kUnableToTrimLastPiece", Acad::ErrorStatus::eUnableToTrimLastPiece)
        .value("kUnableToTrimSurface", Acad::ErrorStatus::eUnableToTrimSurface)
        .value("kModifyingAssociativeEntity", Acad::ErrorStatus::eModifyingAssociativeEntity)
        .value("kModifyingDimensionWithExpression", Acad::ErrorStatus::eModifyingDimensionWithExpression)
        .value("kDependentOnObjectErased", Acad::ErrorStatus::eDependentOnObjectErased)
        .value("kSelfIntersecting", Acad::ErrorStatus::eSelfIntersecting)
        .value("kNotOnBoundary", Acad::ErrorStatus::eNotOnBoundary)
        .value("kNotConnected", Acad::ErrorStatus::eNotConnected)
        .value("kNoInputPath", Acad::ErrorStatus::eNoInputPath)
        .value("kNotAssociative", Acad::ErrorStatus::eNotAssociative)
        .value("kNotG1Continuous", Acad::ErrorStatus::eNotG1Continuous)
        .value("kOwnerToBeTransformed", Acad::ErrorStatus::eOwnerToBeTransformed)
        .value("kMustBeInteger", Acad::ErrorStatus::eMustBeInteger)
        .value("kMustBePositiveInteger", Acad::ErrorStatus::eMustBePositiveInteger)
        .value("kChangedAgainstAssociativity", Acad::ErrorStatus::eChangedAgainstAssociativity)
        .value("kItemCountChanged", Acad::ErrorStatus::eItemCountChanged)
        .value("kGetAdIntImgServicesFailed", Acad::ErrorStatus::eGetAdIntImgServicesFailed)
        .value("kReadImageBufferFailed", Acad::ErrorStatus::eReadImageBufferFailed)
        .value("kWriteImageBufferFailed", Acad::ErrorStatus::eWriteImageBufferFailed)
        .value("kGetImageBytesFailed", Acad::ErrorStatus::eGetImageBytesFailed)
        .value("kGetImageDIBFailed", Acad::ErrorStatus::eGetImageDIBFailed)
        .value("kConvertImageFormatFailed", Acad::ErrorStatus::eConvertImageFormatFailed)
        .value("kGetPreviewImageFailed", Acad::ErrorStatus::eGetPreviewImageFailed)
        .value("kInvalidPreviewImage", Acad::ErrorStatus::eInvalidPreviewImage)
        .value("kDelayMore", Acad::ErrorStatus::eDelayMore)
        .value("kPreviewFailed", Acad::ErrorStatus::ePreviewFailed)
        .value("kAbortPreview", Acad::ErrorStatus::eAbortPreview)
        .value("kEndPreview", Acad::ErrorStatus::eEndPreview)
        .value("kNoPreviewContext", Acad::ErrorStatus::eNoPreviewContext)
        .value("kFileNotInCloud", Acad::ErrorStatus::eFileNotInCloud)
        ;
};

void initPyDbModule()
{
    PyImport_AppendInittab(PyDbNamespace, &PyInit_PyDb);
}
